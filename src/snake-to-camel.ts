import { Project, SourceFile } from 'ts-morph';
import * as path from 'path';
import { getAllFiles } from './files';
import { convertSourceFile } from './convert-source-file';

// Helper function to check if a file should be excluded
export function shouldExcludeFile(sourceFile: SourceFile): boolean {
  try {
    const content = sourceFile.getFullText();
    return content.includes(
      '// This code was AUTOMATICALLY GENERATED by QTypescriptGenerator based on C# types'
    );
  } catch {
    return false; // If we can't read the file, don't exclude it
  }
}

const targetPath: string = process.argv[2];
const tsconfigPath: string =
  process.argv[3] || path.join(process.cwd(), 'tsconfig.json');
if (!targetPath) {
  console.error('Usage: node snake-to-camel.js <folder> [tsconfig.json path]');
  process.exit(1);
}

const project: Project = new Project({
  tsConfigFilePath: tsconfigPath,
  skipAddingFilesFromTsConfig: true,
});

const files: string[] =
  targetPath.endsWith('.ts') || targetPath.endsWith('.tsx')
    ? [targetPath]
    : getAllFiles(targetPath, ['.ts', '.tsx']);

// Add all files to the project first
files.forEach((filePath) => {
  project.addSourceFileAtPath(filePath);
});

// Track all files that need to be saved
export const filesToSave = new Set<string>();

project
  .getSourceFiles()
  .forEach(convertSourceFile({ shouldExcludeFile, filesToSave }));

// Save all files that were modified
Array.from(filesToSave)
  .map((filePath) => project.getSourceFile(filePath))
  .filter((sourceFile) => sourceFile !== undefined)
  .filter((sourceFile) => !shouldExcludeFile(sourceFile))
  .forEach((sourceFile) => {
    sourceFile.saveSync();
    console.log(`Updated: ${sourceFile.getFilePath()}`);
  });
